generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String         @id @default(uuid())
  name             String
  email            String         @unique
  avatar           String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  pushSubscription String?
  accounts         Account[]
  categories       Category[]
  installments     Installment[]
  subscriptions    Subscription[]
  transactions     Transaction[]

  @@map("users")
}

model Account {
  id            String         @id @default(uuid())
  name          String
  color         String
  userId        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id])
  transactions  Transaction[]
  subscriptions Subscription[]

  @@map("accounts")
}

model Category {
  id            String         @id @default(uuid())
  name          String
  color         String
  userId        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id])
  transactions  Transaction[]
  subscriptions Subscription[]

  @@map("categories")
}

model Transaction {
  id             String        @id @default(uuid())
  name           String
  details        String?
  date           DateTime
  type           String
  amount         Decimal
  categoryId     String
  accountId      String
  userId         String
  subscriptionId String?
  installmentId  String?
  paymentMethod  String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  account        Account       @relation(fields: [accountId], references: [id])
  category       Category      @relation(fields: [categoryId], references: [id])
  installment    Installment?  @relation(fields: [installmentId], references: [id])
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  user           User          @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model Subscription {
  id            String        @id @default(uuid())
  name          String
  details       String?
  cost          Decimal
  recurrence    String
  paidAt        DateTime
  userId        String
  accountId     String
  categoryId    String
  paymentMethod String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
  transactions  Transaction[]
  account       Account       @relation(fields: [accountId], references: [id])
  category      Category      @relation(fields: [categoryId], references: [id])

  @@map("subscriptions")
}

model Installment {
  id                    String        @id @default(uuid())
  name                  String
  details               String?
  cost                  Decimal
  paidAt                DateTime
  totalInstallments     Int
  remainingInstallments Int
  userId                String
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  user                  User          @relation(fields: [userId], references: [id])
  transactions          Transaction[]

  @@map("installments")
}
